#!/bin/bash
set -e

# pgBalancer Docker Entrypoint Script
# Handles initialization, configuration generation, and startup

echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë              pgBalancer Docker Container                     ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo ""

# Configuration directory
CONF_DIR="/etc/pgbalancer"
LOG_DIR="/var/log/pgbalancer"
RUN_DIR="/var/run/pgbalancer"
DATA_DIR="/var/lib/pgbalancer"

# Ensure directories exist and have correct permissions
mkdir -p "$CONF_DIR" "$LOG_DIR" "$RUN_DIR" "$DATA_DIR"

# Generate pgbalancer.conf if not exists or if using environment variables
if [ ! -f "$CONF_DIR/pgbalancer.conf" ] || [ "$REGENERATE_CONFIG" = "yes" ]; then
    echo "üìù Generating pgbalancer configuration..."
    
    cat > "$CONF_DIR/pgbalancer.conf" <<EOF
#------------------------------------------------------------------------------
# pgBalancer Configuration (Auto-generated by Docker)
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# CONNECTIONS
#------------------------------------------------------------------------------

listen_addresses = '*'
port = 9999
socket_dir = '$RUN_DIR'
pcp_listen_addresses = '*'
pcp_port = 9898
pcp_socket_dir = '$RUN_DIR'

#------------------------------------------------------------------------------
# BACKEND CONFIGURATION
#------------------------------------------------------------------------------

# Backend 0 (Primary)
backend_hostname0 = '${BACKEND0_HOST:-localhost}'
backend_port0 = ${BACKEND0_PORT:-5432}
backend_weight0 = ${BACKEND0_WEIGHT:-1}
backend_data_directory0 = '${BACKEND0_DATA_DIRECTORY:-/var/lib/postgresql/data}'
backend_flag0 = 'ALLOW_TO_FAILOVER'
backend_application_name0 = 'backend0'

# Backend 1 (Standby)
backend_hostname1 = '${BACKEND1_HOST:-}'
backend_port1 = ${BACKEND1_PORT:-5432}
backend_weight1 = ${BACKEND1_WEIGHT:-1}
backend_data_directory1 = '${BACKEND1_DATA_DIRECTORY:-/var/lib/postgresql/data}'
backend_flag1 = 'ALLOW_TO_FAILOVER'
backend_application_name1 = 'backend1'

# Backend 2 (Standby)
backend_hostname2 = '${BACKEND2_HOST:-}'
backend_port2 = ${BACKEND2_PORT:-5432}
backend_weight2 = ${BACKEND2_WEIGHT:-1}
backend_data_directory2 = '${BACKEND2_DATA_DIRECTORY:-/var/lib/postgresql/data}'
backend_flag2 = 'ALLOW_TO_FAILOVER'
backend_application_name2 = 'backend2'

#------------------------------------------------------------------------------
# CONNECTION POOL
#------------------------------------------------------------------------------

num_init_children = ${NUM_INIT_CHILDREN:-32}
max_pool = ${MAX_POOL:-4}
child_life_time = 300
child_max_connections = 0
connection_life_time = 0
client_idle_limit = 0

#------------------------------------------------------------------------------
# LOGS
#------------------------------------------------------------------------------

log_destination = '${LOG_DESTINATION:-stderr}'
log_line_prefix = '${LOG_LINE_PREFIX:-%t: pid %p: }'
log_connections = ${LOG_CONNECTIONS:-on}
log_hostname = ${LOG_HOSTNAME:-off}
log_statement = ${LOG_STATEMENT:-off}
log_per_node_statement = ${LOG_PER_NODE_STATEMENT:-off}
log_client_messages = off
log_standby_delay = 'if_over_threshold'
syslog_facility = 'LOCAL0'
syslog_ident = 'pgbalancer'

pid_file_name = '$RUN_DIR/pgbalancer.pid'
logdir = '$LOG_DIR'

#------------------------------------------------------------------------------
# LOAD BALANCING
#------------------------------------------------------------------------------

load_balance_mode = ${LOAD_BALANCE_MODE:-on}
ignore_leading_white_space = on
read_only_function_list = ''
write_function_list = ''
primary_routing_query_pattern_list = ''
database_redirect_preference_list = ''
app_name_redirect_preference_list = ''
allow_sql_comments = off
disable_load_balance_on_write = 'transaction'
dml_adaptive_object_relationship_list = ''
statement_level_load_balance = off

#------------------------------------------------------------------------------
# STREAMING REPLICATION
#------------------------------------------------------------------------------

sr_check_period = 10
sr_check_user = '${SR_CHECK_USER:-postgres}'
sr_check_password = '${SR_CHECK_PASSWORD:-}'
sr_check_database = 'postgres'
delay_threshold = 10000000

#------------------------------------------------------------------------------
# HEALTH CHECK
#------------------------------------------------------------------------------

health_check_period = ${HEALTH_CHECK_PERIOD:-10}
health_check_timeout = ${HEALTH_CHECK_TIMEOUT:-20}
health_check_user = '${HEALTH_CHECK_USER:-postgres}'
health_check_password = '${HEALTH_CHECK_PASSWORD:-}'
health_check_database = 'postgres'
health_check_max_retries = ${HEALTH_CHECK_MAX_RETRIES:-3}
health_check_retry_delay = 1
connect_timeout = 10000

#------------------------------------------------------------------------------
# FAILOVER AND FAILBACK
#------------------------------------------------------------------------------

failover_command = ''
failback_command = ''
failover_on_backend_error = on
detach_false_primary = off
search_primary_node_timeout = 300

#------------------------------------------------------------------------------
# WATCHDOG
#------------------------------------------------------------------------------

use_watchdog = ${USE_WATCHDOG:-off}
trusted_servers = ''
ping_path = '/bin'
wd_hostname = ''
wd_port = 9000
wd_priority = 1
wd_authkey = ''
wd_ipc_socket_dir = '$RUN_DIR'
delegate_IP = ''
if_cmd_path = '/sbin'
if_up_cmd = '/usr/bin/sudo /sbin/ip addr add \$_IP_\$/24 dev eth0 label eth0:0'
if_down_cmd = '/usr/bin/sudo /sbin/ip addr del \$_IP_\$/24 dev eth0'
arping_path = '/usr/sbin'
arping_cmd = '/usr/bin/sudo /usr/sbin/arping -U \$_IP_\$ -w 1 -I eth0'
clear_memqcache_on_escalation = on
wd_escalation_command = ''
wd_de_escalation_command = ''
wd_monitoring_interfaces_list = ''
wd_lifecheck_method = 'heartbeat'
wd_interval = 10
wd_heartbeat_port = 9694
wd_heartbeat_keepalive = 2
wd_heartbeat_deadtime = 30
heartbeat_destination0 = ''
heartbeat_destination_port0 = 9694
heartbeat_device0 = ''
wd_life_point = 3
wd_lifecheck_query = 'SELECT 1'
wd_lifecheck_dbname = 'template1'
wd_lifecheck_user = 'nobody'
wd_lifecheck_password = ''

#------------------------------------------------------------------------------
# REST API
#------------------------------------------------------------------------------

enable_rest_api = ${ENABLE_REST_API:-on}
rest_api_port = ${REST_API_PORT:-8080}
rest_api_listen_addresses = '${REST_API_LISTEN_ADDRESSES:-*}'
rest_api_auth_user = '${REST_API_AUTH_USER:-}'
rest_api_auth_password = '${REST_API_AUTH_PASSWORD:-}'

#------------------------------------------------------------------------------
# AUTHENTICATION
#------------------------------------------------------------------------------

enable_pool_hba = ${ENABLE_POOL_HBA:-off}
pool_passwd = ''
authentication_timeout = 60
allow_clear_text_frontend_auth = ${ALLOW_CLEAR_TEXT_FRONTEND_AUTH:-on}
ssl = off

#------------------------------------------------------------------------------
# MEMORY AND QUERY CACHE
#------------------------------------------------------------------------------

memqcache_enabled = off
memory_cache_enabled = off

#------------------------------------------------------------------------------
# IN MEMORY QUERY CACHE
#------------------------------------------------------------------------------

memqcache_method = 'shmem'
memqcache_memcached_host = 'localhost'
memqcache_memcached_port = 11211
memqcache_total_size = 67108864
memqcache_max_num_cache = 1000000
memqcache_expire = 0
memqcache_auto_cache_invalidation = on
memqcache_maxcache = 409600
memqcache_cache_block_size = 1048576
memqcache_oiddir = '$DATA_DIR/oiddir'
white_memqcache_table_list = ''
black_memqcache_table_list = ''

EOF

    echo "‚úÖ Configuration generated at $CONF_DIR/pgbalancer.conf"
fi

# Generate pool_hba.conf if not exists
if [ ! -f "$CONF_DIR/pool_hba.conf" ]; then
    echo "üìù Generating pool_hba configuration..."
    cat > "$CONF_DIR/pool_hba.conf" <<EOF
# pgBalancer Client Authentication Configuration (pool_hba.conf)
# TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD

# Allow all connections from Docker network
host    all         all         0.0.0.0/0             md5
host    all         all         ::/0                  md5

# Local connections
local   all         all                               trust
host    all         all         127.0.0.1/32          trust
host    all         all         ::1/128               trust
EOF
    echo "‚úÖ pool_hba.conf generated"
fi

# Generate PCP password file if needed
if [ ! -f "$CONF_DIR/pcp.conf" ]; then
    echo "üìù Generating PCP configuration..."
    # Generate MD5 password for 'pgbalancer' user
    PCP_PASSWORD="${PCP_PASSWORD:-pgbalancer}"
    PCP_MD5=$(echo -n "$PCP_PASSWORD" | md5sum | awk '{print $1}')
    echo "pgbalancer:$PCP_MD5" > "$CONF_DIR/pcp.conf"
    chmod 600 "$CONF_DIR/pcp.conf"
    echo "‚úÖ PCP configuration generated (user: pgbalancer)"
fi

# Create node ID file if not exists
if [ ! -f "$DATA_DIR/pgbalancer_node_id" ]; then
    echo "${PGBALANCER_NODE_ID:-0}" > "$DATA_DIR/pgbalancer_node_id"
fi

# Wait for backend databases to be ready
if [ "${WAIT_FOR_BACKENDS}" = "yes" ]; then
    echo "‚è≥ Waiting for backend databases..."
    
    for i in 0 1 2; do
        HOST_VAR="BACKEND${i}_HOST"
        PORT_VAR="BACKEND${i}_PORT"
        HOST=${!HOST_VAR}
        PORT=${!PORT_VAR:-5432}
        
        if [ -n "$HOST" ]; then
            echo "   Waiting for $HOST:$PORT..."
            timeout 60 bash -c "until pg_isready -h $HOST -p $PORT -U postgres > /dev/null 2>&1; do sleep 1; done"
            if [ $? -eq 0 ]; then
                echo "   ‚úÖ $HOST:$PORT is ready"
            else
                echo "   ‚ö†Ô∏è  $HOST:$PORT did not respond in time"
            fi
        fi
    done
fi

echo ""
echo "üöÄ Starting pgBalancer..."
echo "   Main Port: 9999"
echo "   PCP Port: 9898"
echo "   REST API: 8080"
echo ""

# Execute the main command
exec "$@"

